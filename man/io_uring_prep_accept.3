.\" Copyright (C) 2022 Jens Axboe <axboe@kernel.dk>
.\"
.\" SPDX-License-Identifier: LGPL-2.0-or-later
.\"
.TH io_uring_prep_accept 3 "March 13, 2022" "liburing-2.2" "liburing Manual"
.SH NAME
io_uring_prep_accept \- prepare an accept request
.SH SYNOPSIS
.nf
.B #include <sys/socket.h>
.B #include <liburing.h>
.PP
.BI "void io_uring_prep_accept(struct io_uring_sqe *" sqe ","
.BI "                          int " sockfd ","
.BI "                          struct sockaddr *" addr ","
.BI "                          socklen_t *" addrlen ","
.BI "                          int " flags ");"
.PP
.BI "void io_uring_prep_accept_direct(struct io_uring_sqe *" sqe ","
.BI "                                 int " sockfd ","
.BI "                                 struct sockaddr *" addr ","
.BI "                                 socklen_t *" addrlen ","
.BI "                                 int " flags ","
.BI "                                 unsigned int " file_index ");"
.PP
.BI "void io_uring_prep_multishot_accept(struct io_uring_sqe *" sqe ","
.BI "                                    int " sockfd ","
.BI "                                    struct sockaddr *" addr ","
.BI "                                    socklen_t *" addrlen ","
.BI "                                    int " flags ");"
.PP
.BI "void io_uring_prep_multishot_accept_direct(struct io_uring_sqe *" sqe ","
.BI "                                           int " sockfd ","
.BI "                                           struct sockaddr *" addr ","
.BI "                                           socklen_t *" addrlen ","
.BI "                                           int " flags ");"
.fi
.SH DESCRIPTION
.PP
The
.BR io_uring_prep_accept (3)
function prepares an accept request. The submission queue entry
.I sqe
is setup to use the file descriptor
.I sockfd
to start accepting a connection request described by the socket address at
.I addr
and of structure length
.I addrlen
and using modifier flags in
.IR flags .

There are four versions of the accept function as
there are two orthogonal aspects to the feature,
whether a regular file descriptor is returned for the accepted connection
or a direct descriptor is selected and returned for the accepted connection
and
whether the request represents a single accept request or multiple accept requests.

Direct descriptors are io_uring private file descriptors
and are managed like registered files.
They avoid some of the overhead associated with thread shared file tables and
can be used in any io_uring request that takes a file descriptor.
To use a direct descriptor in subsequent operations,
.B IOSQE_FIXED_FILE
must be set in the SQE
.I flags
member, and the SQE
.I fd
field should use the direct descriptor value rather than the regular file
descriptor. The SQE
.I fd
field is often specified in the library function as the
.I fd
or
.I sockfd
argument but the
application will have to at least set
.B IOSQE_FIXED_FILE
in the SQE
.I flags
member separately, after the SQE is prepared.

The multishot accept and accept_direct versions allow an application to issue
a single accept request, which will repeatedly trigger a CQE when a connection
request comes in. Like other multishot type requests, the application should
look at the CQE
.I flags
and see if
.B IORING_CQE_F_MORE
is set on completion as an indication of whether or not the accept request
will generate further CQEs. Note that for the multishot variants, setting
.I addr
and
.I addrlen
may not make a lot of sense, as the same value would be used for every
accepted connection. This means that the data written to
.I addr
may be overwritten by a new connection before the application has had time
to process a past connection. If the application knows that a new connection
cannot come in before a previous one has been processed, it may be used as
expected. The multishot variants are available since 5.19.

If a direct variant is used, the application must first have registered
a file table using
.BR io_uring_register_files (3)
of the appropriate size. Once registered,
.BR io_uring_prep_accept_direct (3)
may specify any
.I file_index
of that table, as long as it is within the size of the registered table.
If the specified entry already contains a file, the file will first be removed
from the table and closed, consistent with the behavior of updating an
existing file with
.BR io_uring_register_files_update (3).

.B TODO

How to warn that the library doesn't offer direct help in determining whether
the kernel supports the direct methods?
There is no
.B IORING_OP_ACCEPT_DIRECT
which the
earlier version of this man page said should be checked.
Is there another OP that can be checked
that should map to when the single shot accept direct would be supported and
can they be directed to checking for
.B IORING_OP_SOCKET
for multishot direct version as both the multishot accept capability and the
.B IORING_OP_SOCKET
operation were introduced in the same kernel?
And the operation can be tested for but the capability cannot.

The application cannot rely on a
.B -EINVAL
CQE
.I res
return value as
the operation can be interpreted as a regular accept
and a regular file descriptor may be returned.

In the first direct descriptor accept request version, where the
.I file_index
is given, the application can instruct the kernel to make its own selection
from the free entries of the io_uring file table table
by setting
.I file_index
to
.BR IORING_FILE_INDEX_ALLOC .
If a free entry in io_uring file table is available,
it will be returned as the CQE
.IR res .
.B -ENFILE
is otherwise returned if there are no free entries remaining.

These functions prepare an async
.BR accept4 (2)
request. See that man page for details.

.SH RETURN VALUE
None
.SH ERRORS
The CQE
.I res
field will contain the result of the operation. For singleshot accept, the
non-direct accept returns the installed file descriptor as its value, the
direct accept returns
.B 0
on success when the
.I file_index
was used as a table index;
the caller must know which direct descriptor was given for this
request in this case as it is not returned,
.B 0
is returned.
When
.I file_index
was given as
.BR IORING_FILE_INDEX_ALLOC ,
the file index that was chosen is returned.

For the multishot accept,
when multiple successful CQE may be returned,
the non-direct accept CQE contain the installed file descriptor,
the direct accept CQE contain the file index chosen.
See the related man page for details on possible values for the
non-direct accept. Note that where synchronous system calls will return
.B -1
on failure and set
.I errno
to the actual error value, io_uring never uses
.IR errno .
Instead it returns the negated
.I errno
directly in the CQE
.I res
field.
.SH NOTES
As with any request that passes in data in a struct, that data must remain
valid until the request has been successfully submitted. It need not remain
valid until completion. Once a request has been submitted, the in-kernel
state is stable. Very early kernels (5.4 and earlier) required state to be
stable until the completion occurred. Applications can test for this
behavior by inspecting the
.B IORING_FEAT_SUBMIT_STABLE
flag passed back from
.BR io_uring_queue_init_params (3).
.SH SEE ALSO
.BR io_uring_get_sqe (3),
.BR io_uring_submit (3),
.BR io_uring_register (2),
.BR accept4 (2)
